{"framerate":60,"highQualityPen":true,"maxClones":9999999999,"fencing":false,"miscLimits":false,"stageWidth":640,"autoplay":true,"loadingScreen":{"text":"test build 2","progressBar":true,"imageMode":"normal","image":null},"controls":{"greenFlag":{"enabled":true},"stopAll":{"enabled":true},"fullscreen":{"enabled":true},"pause":{"enabled":true}},"compiler":{"warpTimer":true,"enabled":true},"target":"electron-win32","app":{"version":"0.1.0","icon":{"__isBlob":true,"type":"image/x-icon","name":"icon.ico","data":"AAABAAEAEBAAAAEAIAC0AAAAFgAAAIlQTkcNChoKAAAADUlIRFIAAAAQAAAAEAgGAAAAH/P/YQAAAAhhY1RMAAAAAQAAAAC0LemgAAAAGmZjVEwAAAAAAAAAEAAAABAAAAAAAAAAAAABAAEAAG8TIMQAAABBSURBVHicY2CgIvhPidr/uCTwaMaqlhQDUAQowQz/ff6Th/EagCyOTw3tXDAwBhBjGLp6DBcQirZBGgaUpkSKAABYI0q+B+yCRgAAAABJRU5ErkJggg=="},"packageName":"escape-from-morocco","windowTitle":"Escape From Morocco","windowMode":"window","escapeBehavior":"unfullscreen-only","windowControls":"default"},"chunks":{"gamepad":true,"pointerlock":false},"cloudVariables":{"mode":"local","unsafeCloudBehaviors":true,"cloudHost":"wss://clouddata.turbowarp.org","custom":{"☁ unlockedLevels":"ws","☁ tutorialPassed?":"ws","☁ curLevel":"ws","☁ stat_rateOfFire":"ws","☁ stat_dirhams":"ws","☁ stat_damage":"ws","☁ shopStat_rateOfFire_bought":"ws","☁ shopStat_damage_bought":"ws","☁ stat_playerHealth":"ws","☁ shopStat_projSpeed_bought":"ws","☁ stat_projSpeed":"ws","☁ shopStat_piercing_bought":"ws","☁ shopStat_accuracy_bought":"ws","☁ stat_accuracy":"ws","☁ stat_piercing":"ws"},"specialCloudBehaviors":false},"turbo":false,"interpolation":false,"stageHeight":360,"resizeMode":"preserve-ratio","username":"player####","closeWhenStopped":false,"projectId":"p4-@Escape From Morocco.sb3","custom":{"css":"","js":""},"appearance":{"background":"#000000","foreground":"#ffffff","accent":"#ff4c4c"},"monitors":{"editableLists":false,"variableColor":"#ff8c1a","listColor":"#fc662c"},"packagedRuntime":true,"cursor":{"type":"auto","custom":null,"center":{"x":0,"y":0}},"steamworks":{"appId":"480","onError":"warning"},"extensions":["https://extensions.turbowarp.org/TheShovel/CanvasEffects.js","https://extensions.turbowarp.org/JeremyGamer13/tween.js","data:text/javascript;base64,","https://extensions.turbowarp.org/Lily/MoreEvents.js","data:text/javascript;base64,","data:text/javascript;base64,","https://extensions.turbowarp.org/Lily/TempVariables2.js","https://extensions.turbowarp.org/runtime-options.js","data:text/javascript;base64,","data:text/javascript;base64,","https://extensions.turbowarp.org/gamejolt.js","https://extensions.turbowarp.org/SharkPool/Camera.js","https://extensions.turbowarp.org/Lily/LooksPlus.js","https://extensions.turbowarp.org/Lily/ClonesPlus.js","https://extensions.turbowarp.org/lab/text.js","data:text/javascript;base64,","https://extensions.turbowarp.org/Xeltalliv/clippingblending.js","https://extensions.turbowarp.org/Lily/lmsutils.js","https://extensions.turbowarp.org/qxsck/var-and-list.js","https://extensions.turbowarp.org/Lily/MoreTimers.js","https://extensions.turbowarp.org/obviousAlexC/newgroundsIO.js","data:text/javascript;base64,Ly8gTmFtZTogU2NyaXB0IENvbnRyb2wKLy8gSUQ6IFNQc2NyaXB0cwovLyBEZXNjcmlwdGlvbjogQ29udHJvbCBTY3JpcHRzCi8vIEJ5OiBTaGFya1Bvb2wKLy8gTGljZW5zZTogTUlUCgovLyBWZXJzaW9uIFYuMi4wLjAKCihmdW5jdGlvbiAoU2NyYXRjaCkgewogICJ1c2Ugc3RyaWN0IjsKICBpZiAoIVNjcmF0Y2guZXh0ZW5zaW9ucy51bnNhbmRib3hlZCkgdGhyb3cgbmV3IEVycm9yKCJTY3JpcHQgQ29udHJvbCBtdXN0IGJlIHJ1biB1bnNhbmRib3hlZCIpOwoKICBjb25zdCBtZW51SWNvblVSSSA9CiJkYXRhOmltYWdlL3N2Zyt4bWw7YmFzZTY0LFBITjJaeUI0Yld4dWN6MGlhSFIwY0RvdkwzZDNkeTUzTXk1dmNtY3ZNakF3TUM5emRtY2lJSGRwWkhSb1BTSXhNVGd1TVRVNElpQm9aV2xuYUhROUlqRXhPQzR4TlRnaUlIWnBaWGRDYjNnOUlqQWdNQ0F4TVRndU1UVTRJREV4T0M0eE5UZ2lQanhrWldaelBqeHNhVzVsWVhKSGNtRmthV1Z1ZENCNE1UMGlNVGs0TGpJeU5TSWdlVEU5SWpFek9DNHlNalVpSUhneVBTSXlPREV1TnpjMUlpQjVNajBpTWpJeExqYzNOU0lnWjNKaFpHbGxiblJWYm1sMGN6MGlkWE5sY2xOd1lXTmxUMjVWYzJVaUlHbGtQU0poSWo0OGMzUnZjQ0J2Wm1aelpYUTlJakFpSUhOMGIzQXRZMjlzYjNJOUlpTXhNelV6TkRjaUx6NDhjM1J2Y0NCdlptWnpaWFE5SWpFaUlITjBiM0F0WTI5c2IzSTlJaU14WmpNek16UWlMejQ4TDJ4cGJtVmhja2R5WVdScFpXNTBQanhzYVc1bFlYSkhjbUZrYVdWdWRDQjRNVDBpTWpBeUxqQTVOU0lnZVRFOUlqRTBNaTR3T1RVaUlIZ3lQU0l5TnpjdU9UQTFJaUI1TWowaU1qRTNMamt3TlNJZ1ozSmhaR2xsYm5SVmJtbDBjejBpZFhObGNsTndZV05sVDI1VmMyVWlJR2xrUFNKaUlqNDhjM1J2Y0NCdlptWnpaWFE5SWpBaUlITjBiM0F0WTI5c2IzSTlJaU14WlRnek56QWlMejQ4YzNSdmNDQnZabVp6WlhROUlqRWlJSE4wYjNBdFkyOXNiM0k5SWlNellUWXdOaklpTHo0OEwyeHBibVZoY2tkeVlXUnBaVzUwUGp3dlpHVm1jejQ4WnlCemRISnZhMlV0YldsMFpYSnNhVzFwZEQwaU1UQWlQanh3WVhSb0lHUTlJazB4T1RndU1qSTFJREl5TVM0M056VmpMVEl6TGpBM01pMHlNeTR3TnpJdE1qTXVNRGN5TFRZd0xqUTNPQ0F3TFRnekxqVTFjell3TGpRM09DMHlNeTR3TnpJZ09ETXVOVFVnTUNBeU15NHdOeklnTmpBdU5EYzRJREFnT0RNdU5UVXROakF1TkRjNElESXpMakEzTWkwNE15NDFOU0F3SWlCbWFXeHNQU0oxY213b0kyRXBJaUIwY21GdWMyWnZjbTA5SW5SeVlXNXpiR0YwWlNndE1UZ3dMamt5TVNBdE1USXdMamt5TVNraUx6NDhjR0YwYUNCa1BTSk5NakF5TGpBNU5TQXlNVGN1T1RBMVl5MHlNQzQ1TXpRdE1qQXVPVE0wTFRJd0xqa3pOQzAxTkM0NE56WWdNQzAzTlM0NE1YTTFOQzQ0TnpZdE1qQXVPVE0wSURjMUxqZ3hJREFnTWpBdU9UTTBJRFUwTGpnM05pQXdJRGMxTGpneExUVTBMamczTmlBeU1DNDVNelF0TnpVdU9ERWdNQ0lnWm1sc2JEMGlkWEpzS0NOaUtTSWdkSEpoYm5ObWIzSnRQU0owY21GdWMyeGhkR1VvTFRFNE1DNDVNakVnTFRFeU1DNDVNakVwSWk4K1BIQmhkR2dnWkQwaVRURXdNaTQyTVRFZ05qY3VORGMyWXk0eU1pQXlMakUxTmkweExqQTBOaUEwTGpBMU5DMHlMamd5TnlBMExqSXpObXd0TXpRdU1Ua3lJRE11TldNdExqZzFPQzR3T0RndE1TNDJNell1TlRjNExUSXVNVFlnTVM0ek56UnNMVE11T1RRM0lEVXVPVEV6WXkwdU5USTFMamM0T0MweExqTXdNeUF4TGpJNE5TMHlMakUySURFdU16Y3pURFF3TGpZek9DQTROUzQxT0dNdExqZzFPQzR3T0RndE1TNDNNaTB1TWpReUxUSXVOREF4TFM0NU1EWnNMVFV1TURVMkxUUXVPVGt5WXkwdU5qZ3hMUzQyTnpJdE1TNDFOREl0TGprNU5TMHlMak01TkMwdU9UQTRiQzA0TGpRd09DNDROakZqTFRFdU56Z3VNVGd5TFRNdU5EQTFMVEV1TkRJdE15NDJNall0TXk0MU56VnNMVE11TWpBMkxUTXhMak15TTJNdExqSXlMVEl1TVRVMklERXVNRFEyTFRRdU1EVTBJREl1T0RJM0xUUXVNak0yYkRndU16UXpMUzQ0TlRSakxqZzFPQzB1TURnNElERXVOekl1TWpReUlESXVNemswTGprd04ydzFMakV5T0NBMUxqQTJOR011TmpneExqWTJOQ0F4TGpVME15NDVPVFFnTWk0ME1ERXVPVEEyYkRFMkxqWTROeTB4TGpjd09HTXVPRFU0TFM0d09EZ2dNUzQyTXpVdExqVTROU0F5TGpFMkxURXVNemN6YkRNdU9UazNMVFV1T1RrNFl5NDFNekl0TGpjNE9DQXhMak13T1MweExqSTROaUF5TGpFMk55MHhMak0zTkd3ek5DNHhNamd0TXk0ME9USmpNUzQzT0MwdU1UZ3lJRE11TkRBMUlERXVORElnTXk0Mk1qWWdNeTQxTnpWNlRUZ3dMakF3T0NBek9TNHpPRFJzTFRFeUxqVXlOQ0F4TGpJNE1tTXRPQzR3Tnk0NE1qWXRNVE11T1RReUlEZ3VNRE0zTFRFekxqRXhOaUF4Tmk0eE1EZHpPQzR3TXpnZ01UTXVPVFF5SURFMkxqRXdOeUF4TXk0eE1UWnNNVEl1TlRJMExURXVNamd5WXpndU1EY3RMamd5TmlBeE15NDVOREV0T0M0d016Y2dNVE11TVRFMUxURTJMakV3TjNNdE9DNHdNemN0TVRNdU9UUXhMVEUyTGpFd05pMHhNeTR4TVRadExTNHpNVGtnTVRRdU56azNZeTQxT1NBMUxqYzJOQzB6TGpZd05TQXhNQzQ1TVRVdE9TNHpOamtnTVRFdU5UQTFZVEV3TGpRNU1pQXhNQzQwT1RJZ01DQXhJREV0TWk0eE16UXRNakF1T0RjMVl6VXVOelkwTFM0MU9Ea2dNVEF1T1RFMElETXVOakEySURFeExqVXdNeUE1TGpNM0lpQm1hV3hzUFNJalptWm1JaUJtYVd4c0xYSjFiR1U5SW1WMlpXNXZaR1FpTHo0OEwyYytQQzl6ZG1jKyI7CgogIGNvbnN0IHZtID0gU2NyYXRjaC52bTsKICBjb25zdCBDYXN0ID0gU2NyYXRjaC5DYXN0OwogIGNvbnN0IHJ1bnRpbWUgPSB2bS5ydW50aW1lOwogIGNvbnN0IHRyYW5zbGF0ZWQgPSB7CiAgICBzY3JpcHQ6IFNjcmF0Y2gudHJhbnNsYXRlKCJzY3JpcHQtMSIpCiAgfTsKCiAgY29uc3QgY29udHJvbEtleSA9IFN5bWJvbCgiU1BzY3JpcHRzRGF0YSIpOwogIGxldCBtYXJrZWRTY3JpcHRzID0gbmV3IE1hcCgpOwoKICBjb25zdCBvZ1N0ZXBUaHJlYWRzID0gcnVudGltZS5zZXF1ZW5jZXIuc3RlcFRocmVhZHM7CiAgcnVudGltZS5zZXF1ZW5jZXIuc3RlcFRocmVhZHMgPSBmdW5jdGlvbigpIHsKICAgIG1hcmtlZFNjcmlwdHMuZm9yRWFjaCgoc2NyaXB0KSA9PiB7CiAgICAgIGNvbnN0IHRocmVhZCA9IHNjcmlwdC50aHJlYWRDdHg7CiAgICAgIGlmICh0aHJlYWRbY29udHJvbEtleV0pIHsKICAgICAgICBpZiAodGhyZWFkLnN0YXR1cyAhPT0gNSkgdGhyZWFkW2NvbnRyb2xLZXldID0gdGhyZWFkLnN0YXR1czsKICAgICAgICB0aHJlYWQuc3RhdHVzID0gNQogICAgICB9CiAgICB9KTsKICAgIHJldHVybiBvZ1N0ZXBUaHJlYWRzLmNhbGwodGhpcyk7CiAgfTsKCiAgY29uc3QgZXhwUmVuZGVyZWRUYXJnZXQgPSBuZXcgdm0uZXhwb3J0cy5SZW5kZXJlZFRhcmdldCh7IGJsb2NrczogbnVsbCB9LCBydW50aW1lKTsKICBjb25zdCBCbG9ja3MgPSBleHBSZW5kZXJlZFRhcmdldC5ibG9ja3MuY29uc3RydWN0b3I7CiAgY29uc3Qgb2dHZXROZXh0ID0gQmxvY2tzLnByb3RvdHlwZS5nZXROZXh0QmxvY2s7CiAgQmxvY2tzLnByb3RvdHlwZS5nZXROZXh0QmxvY2sgPSBmdW5jdGlvbihuYW1lKSB7CiAgICBjb25zdCB0aGlzQmxvY2sgPSBvZ0dldE5leHQuY2FsbCh0aGlzLCBuYW1lKTsKICAgIGlmICh0aGlzQmxvY2spIHJldHVybiB0aGlzQmxvY2s7CiAgICBmb3IgKGNvbnN0IHRhcmdldCBvZiB0aGlzLnJ1bnRpbWUudGFyZ2V0cykgewogICAgICBpZiAoIXRhcmdldC5pc09yaWdpbmFsIHx8IHRhcmdldC5ibG9ja3MgPT09IHRoaXMpIGNvbnRpbnVlOwogICAgICBjb25zdCB0YXJnZXRCbG9jayA9IG9nR2V0TmV4dC5jYWxsKHRhcmdldC5ibG9ja3MsIG5hbWUpOwogICAgICBpZiAodGFyZ2V0QmxvY2spIHJldHVybiB0YXJnZXRCbG9jazsKICAgIH0KICAgIHJldHVybiB1bmRlZmluZWQ7CiAgfQogIGNvbnN0IG9nR2V0QnJhbmNoID0gQmxvY2tzLnByb3RvdHlwZS5nZXRCcmFuY2g7CiAgQmxvY2tzLnByb3RvdHlwZS5nZXRCcmFuY2ggPSBmdW5jdGlvbihpZCwgYnJhbmNoTnVtKSB7CiAgICBjb25zdCB0aGlzQmxvY2sgPSBvZ0dldEJyYW5jaC5jYWxsKHRoaXMsIGlkLCBicmFuY2hOdW0pOwogICAgaWYgKHRoaXNCbG9jaykgcmV0dXJuIHRoaXNCbG9jazsKICAgIGZvciAoY29uc3QgdGFyZ2V0IG9mIHRoaXMucnVudGltZS50YXJnZXRzKSB7CiAgICAgIGlmICghdGFyZ2V0LmlzT3JpZ2luYWwgfHwgdGFyZ2V0LmJsb2NrcyA9PT0gdGhpcykgY29udGludWU7CiAgICAgIGNvbnN0IHRhcmdldEJsb2NrID0gb2dHZXRCcmFuY2guY2FsbCh0YXJnZXQuYmxvY2tzLCBpZCwgYnJhbmNoTnVtKTsKICAgICAgaWYgKHRhcmdldEJsb2NrKSByZXR1cm4gdGFyZ2V0QmxvY2s7CiAgICB9CiAgICByZXR1cm4gdW5kZWZpbmVkOwogIH0KCiAgY2xhc3MgU1BzY3JpcHRzIHsKICAgIGdldEluZm8oKSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgaWQ6ICJTUHNjcmlwdHMiLAogICAgICAgIG5hbWU6IFNjcmF0Y2gudHJhbnNsYXRlKCJTY3JpcHQgQ29udHJvbCIpLAogICAgICAgIGNvbG9yMTogIiMzYTYwNjIiLAogICAgICAgIGNvbG9yMjogIiMxMjRkNDIiLAogICAgICAgIGNvbG9yMzogIiMxYzJlMmYiLAogICAgICAgIG1lbnVJY29uVVJJLAogICAgICAgIGJsb2NrczogWwogICAgICAgICAgeyBibG9ja1R5cGU6IFNjcmF0Y2guQmxvY2tUeXBlLkxBQkVMLCB0ZXh0OiBTY3JhdGNoLnRyYW5zbGF0ZSgiTWFya2VycyIpIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgIG9wY29kZTogImxvZ1NjcmlwdCIsCiAgICAgICAgICAgIGJsb2NrVHlwZTogU2NyYXRjaC5CbG9ja1R5cGUuQ09NTUFORCwKICAgICAgICAgICAgdGV4dDogU2NyYXRjaC50cmFuc2xhdGUoImxvZyB0aGlzIHNjcmlwdCB3aXRoIGN1c3RvbSBJRCBbSURdIiksCiAgICAgICAgICAgIGFyZ3VtZW50czogewogICAgICAgICAgICAgIElEOiB7IHR5cGU6IFNjcmF0Y2guQXJndW1lbnRUeXBlLlNUUklORywgZGVmYXVsdFZhbHVlOiB0cmFuc2xhdGVkLnNjcmlwdCB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgIG9wY29kZTogInJlbW92ZUxvZyIsCiAgICAgICAgICAgIGJsb2NrVHlwZTogU2NyYXRjaC5CbG9ja1R5cGUuQ09NTUFORCwKICAgICAgICAgICAgdGV4dDogU2NyYXRjaC50cmFuc2xhdGUoImVyYXNlIHNjcmlwdCB3aXRoIGN1c3RvbSBJRCBbSURdIiksCiAgICAgICAgICAgIGFyZ3VtZW50czogewogICAgICAgICAgICAgIElEOiB7IHR5cGU6IFNjcmF0Y2guQXJndW1lbnRUeXBlLlNUUklORywgZGVmYXVsdFZhbHVlOiB0cmFuc2xhdGVkLnNjcmlwdCB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgIG9wY29kZTogInJlbW92ZUxvZ3MiLAogICAgICAgICAgICBibG9ja1R5cGU6IFNjcmF0Y2guQmxvY2tUeXBlLkNPTU1BTkQsCiAgICAgICAgICAgIHRleHQ6IFNjcmF0Y2gudHJhbnNsYXRlKCJyZW1vdmUgYWxsIGxvZ2dlZCBzY3JpcHRzIikKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgIG9wY29kZTogImFsbExvZ3MiLAogICAgICAgICAgICBibG9ja1R5cGU6IFNjcmF0Y2guQmxvY2tUeXBlLlJFUE9SVEVSLAogICAgICAgICAgICB0ZXh0OiBTY3JhdGNoLnRyYW5zbGF0ZSgiYWxsIGxvZ2dlZCBzY3JpcHRzIikKICAgICAgICAgIH0sCiAgICAgICAgICAiLS0tIiwKICAgICAgICAgIHsKICAgICAgICAgICAgb3Bjb2RlOiAiaW5kZXhMb2ciLAogICAgICAgICAgICBibG9ja1R5cGU6IFNjcmF0Y2guQmxvY2tUeXBlLlJFUE9SVEVSLAogICAgICAgICAgICB0ZXh0OiBTY3JhdGNoLnRyYW5zbGF0ZSgiaW5kZXggb2YgbG9nIGluIHNjcmlwdCB3aXRoIGN1c3RvbSBJRCBbSURdIiksCiAgICAgICAgICAgIGFyZ3VtZW50czogewogICAgICAgICAgICAgIElEOiB7IHR5cGU6IFNjcmF0Y2guQXJndW1lbnRUeXBlLlNUUklORywgZGVmYXVsdFZhbHVlOiB0cmFuc2xhdGVkLnNjcmlwdCB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICB7IGJsb2NrVHlwZTogU2NyYXRjaC5CbG9ja1R5cGUuTEFCRUwsIHRleHQ6IFNjcmF0Y2gudHJhbnNsYXRlKCJDb250cm9sIikgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgb3Bjb2RlOiAiZG9TY3JpcHRzIiwKICAgICAgICAgICAgYmxvY2tUeXBlOiBTY3JhdGNoLkJsb2NrVHlwZS5DT01NQU5ELAogICAgICAgICAgICB0ZXh0OiBTY3JhdGNoLnRyYW5zbGF0ZSgiW1RZUEVdIHNjcmlwdCB3aXRoIElEIFtJRF0iKSwKICAgICAgICAgICAgYXJndW1lbnRzOiB7CiAgICAgICAgICAgICAgVFlQRTogeyB0eXBlOiBTY3JhdGNoLkFyZ3VtZW50VHlwZS5TVFJJTkcsIG1lbnU6ICJDT05UUk9MIiB9LAogICAgICAgICAgICAgIElEOiB7IHR5cGU6IFNjcmF0Y2guQXJndW1lbnRUeXBlLlNUUklORywgZGVmYXVsdFZhbHVlOiB0cmFuc2xhdGVkLnNjcmlwdCB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgIG9wY29kZTogInNraXBCbG9ja3MiLAogICAgICAgICAgICBibG9ja1R5cGU6IFNjcmF0Y2guQmxvY2tUeXBlLkNPTU1BTkQsCiAgICAgICAgICAgIHRleHQ6IFNjcmF0Y2gudHJhbnNsYXRlKCJzdGFydCBzY3JpcHQgd2l0aCBJRCBbSURdIGF0IGJsb2NrIGluZGV4IFtOVU1dIiksCiAgICAgICAgICAgIGFyZ3VtZW50czogewogICAgICAgICAgICAgIE5VTTogeyB0eXBlOiBTY3JhdGNoLkFyZ3VtZW50VHlwZS5OVU1CRVIsIGRlZmF1bHRWYWx1ZTogNSB9LAogICAgICAgICAgICAgIElEOiB7IHR5cGU6IFNjcmF0Y2guQXJndW1lbnRUeXBlLlNUUklORywgZGVmYXVsdFZhbHVlOiB0cmFuc2xhdGVkLnNjcmlwdCB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgIG9wY29kZTogInNraXBNeUJsb2NrcyIsCiAgICAgICAgICAgIGJsb2NrVHlwZTogU2NyYXRjaC5CbG9ja1R5cGUuQ09NTUFORCwKICAgICAgICAgICAgdGV4dDogU2NyYXRjaC50cmFuc2xhdGUoInNraXAgbmV4dCBbTlVNXSBibG9ja3MiKSwKICAgICAgICAgICAgYXJndW1lbnRzOiB7CiAgICAgICAgICAgICAgTlVNOiB7IHR5cGU6IFNjcmF0Y2guQXJndW1lbnRUeXBlLk5VTUJFUiwgZGVmYXVsdFZhbHVlOiA1IH0KICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgICItLS0iLAogICAgICAgICAgewogICAgICAgICAgICBvcGNvZGU6ICJkb1NjcmlwdFRhcmdldCIsCiAgICAgICAgICAgIGJsb2NrVHlwZTogU2NyYXRjaC5CbG9ja1R5cGUuQ09NTUFORCwKICAgICAgICAgICAgdGV4dDogU2NyYXRjaC50cmFuc2xhdGUoInN0YXJ0IHNjcmlwdCB3aXRoIElEIFtJRF0gaW4gW1RBUkdFVF0iKSwKICAgICAgICAgICAgYXJndW1lbnRzOiB7CiAgICAgICAgICAgICAgVEFSR0VUOiB7IHR5cGU6IFNjcmF0Y2guQXJndW1lbnRUeXBlLlNUUklORywgbWVudTogIlRBUkdFVFMiIH0sCiAgICAgICAgICAgICAgSUQ6IHsgdHlwZTogU2NyYXRjaC5Bcmd1bWVudFR5cGUuU1RSSU5HLCBkZWZhdWx0VmFsdWU6IHRyYW5zbGF0ZWQuc2NyaXB0IH0KICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgb3Bjb2RlOiAiZG9TY3JpcHRDbG9uZSIsCiAgICAgICAgICAgIGJsb2NrVHlwZTogU2NyYXRjaC5CbG9ja1R5cGUuQ09NTUFORCwKICAgICAgICAgICAgdGV4dDogU2NyYXRjaC50cmFuc2xhdGUoInN0YXJ0IHNjcmlwdCB3aXRoIElEIFtJRF0gaW4gY2xvbmVzIG9mIFtUQVJHRVRdIHdpdGggW1ZBUl0gc2V0IHRvIFtWQUxdIiksCiAgICAgICAgICAgIGFyZ3VtZW50czogewogICAgICAgICAgICAgIElEOiB7IHR5cGU6IFNjcmF0Y2guQXJndW1lbnRUeXBlLlNUUklORywgZGVmYXVsdFZhbHVlOiB0cmFuc2xhdGVkLnNjcmlwdCB9LAogICAgICAgICAgICAgIFRBUkdFVDogeyB0eXBlOiBTY3JhdGNoLkFyZ3VtZW50VHlwZS5TVFJJTkcsIG1lbnU6ICJUQVJHRVRTMiIgfSwKICAgICAgICAgICAgICBWQVI6IHsgdHlwZTogU2NyYXRjaC5Bcmd1bWVudFR5cGUuU1RSSU5HLCBkZWZhdWx0VmFsdWU6ICJteSB2YXJpYWJsZSIgfSwKICAgICAgICAgICAgICBWQUw6IHsgdHlwZTogU2NyYXRjaC5Bcmd1bWVudFR5cGUuU1RSSU5HLCBkZWZhdWx0VmFsdWU6ICIwIiB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICB7IGJsb2NrVHlwZTogU2NyYXRjaC5CbG9ja1R5cGUuTEFCRUwsIHRleHQ6IFNjcmF0Y2gudHJhbnNsYXRlKCJPcGVyYXRpb25zIikgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgb3Bjb2RlOiAid2hpbGVTY3JpcHQiLAogICAgICAgICAgICBibG9ja1R5cGU6IFNjcmF0Y2guQmxvY2tUeXBlLkxPT1AsCiAgICAgICAgICAgIHRleHQ6IFNjcmF0Y2gudHJhbnNsYXRlKCJ3aGlsZSBzY3JpcHQgd2l0aCBJRCBbSURdIGlzIHJ1bm5pbmciKSwKICAgICAgICAgICAgYXJndW1lbnRzOiB7CiAgICAgICAgICAgICAgSUQ6IHsgdHlwZTogU2NyYXRjaC5Bcmd1bWVudFR5cGUuU1RSSU5HLCBkZWZhdWx0VmFsdWU6IHRyYW5zbGF0ZWQuc2NyaXB0IH0KICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgb3Bjb2RlOiAiaXNTY3JpcHQiLAogICAgICAgICAgICBibG9ja1R5cGU6IFNjcmF0Y2guQmxvY2tUeXBlLkJPT0xFQU4sCiAgICAgICAgICAgIHRleHQ6IFNjcmF0Y2gudHJhbnNsYXRlKCJzY3JpcHQgd2l0aCBJRCBbSURdIHJ1bm5pbmc/IiksCiAgICAgICAgICAgIGFyZ3VtZW50czogewogICAgICAgICAgICAgIElEOiB7IHR5cGU6IFNjcmF0Y2guQXJndW1lbnRUeXBlLlNUUklORywgZGVmYXVsdFZhbHVlOiB0cmFuc2xhdGVkLnNjcmlwdCB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgIG9wY29kZTogImlzTWFudWFsIiwKICAgICAgICAgICAgYmxvY2tUeXBlOiBTY3JhdGNoLkJsb2NrVHlwZS5CT09MRUFOLAogICAgICAgICAgICB0ZXh0OiBTY3JhdGNoLnRyYW5zbGF0ZSgic2NyaXB0IHdpdGggSUQgW0lEXSBtYW51YWxseSBydW5uaW5nPyIpLAogICAgICAgICAgICBhcmd1bWVudHM6IHsKICAgICAgICAgICAgICBJRDogeyB0eXBlOiBTY3JhdGNoLkFyZ3VtZW50VHlwZS5TVFJJTkcsIGRlZmF1bHRWYWx1ZTogdHJhbnNsYXRlZC5zY3JpcHQgfQogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgLyogRGVwcmVjYXRpb24gTWFya2VyICovCiAgICAgICAgICB7CiAgICAgICAgICAgIG9wY29kZTogIm1hcmtTY3JpcHQiLCBibG9ja1R5cGU6IFNjcmF0Y2guQmxvY2tUeXBlLkNPTU1BTkQsCiAgICAgICAgICAgIHRleHQ6ICJsb2cgdGhpcyBzY3JpcHQgYmxvY2sgd2l0aCBjdXN0b20gSUQgW0lEXSIsIGhpZGVGcm9tUGFsZXR0ZTogdHJ1ZSwKICAgICAgICAgICAgYXJndW1lbnRzOiB7CiAgICAgICAgICAgICAgSUQ6IHsgdHlwZTogU2NyYXRjaC5Bcmd1bWVudFR5cGUuU1RSSU5HIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgLyogTWFya2VyIEVuZCAqLwogICAgICAgIF0sCiAgICAgICAgbWVudXM6IHsKICAgICAgICAgIFRBUkdFVFM6IHsgYWNjZXB0UmVwb3J0ZXJzOiB0cnVlLCBpdGVtczogdGhpcy5nZXRUYXJnZXRzKGZhbHNlKSB9LAogICAgICAgICAgVEFSR0VUUzI6IHsgYWNjZXB0UmVwb3J0ZXJzOiB0cnVlLCBpdGVtczogdGhpcy5nZXRUYXJnZXRzKHRydWUpIH0sCiAgICAgICAgICBDT05UUk9MOiB7CiAgICAgICAgICAgIGFjY2VwdFJlcG9ydGVyczogdHJ1ZSwKICAgICAgICAgICAgaXRlbXM6IFsKICAgICAgICAgICAgICB7IHRleHQ6IFNjcmF0Y2gudHJhbnNsYXRlKCJzdGFydCIpLCB2YWx1ZTogInN0YXJ0IiB9LAogICAgICAgICAgICAgIHsgdGV4dDogU2NyYXRjaC50cmFuc2xhdGUoInN0b3AiKSwgdmFsdWU6ICJzdG9wIiB9LAogICAgICAgICAgICAgIHsgdGV4dDogU2NyYXRjaC50cmFuc2xhdGUoInJlc3RhcnQiKSwgdmFsdWU6ICJyZXN0YXJ0IiB9LAogICAgICAgICAgICAgIHsgdGV4dDogU2NyYXRjaC50cmFuc2xhdGUoInBhdXNlIiksIHZhbHVlOiAicGF1c2UiIH0sCiAgICAgICAgICAgICAgeyB0ZXh0OiBTY3JhdGNoLnRyYW5zbGF0ZSgidW5wYXVzZSIpLCB2YWx1ZTogInVucGF1c2UiIH0KICAgICAgICAgICAgXQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgIH07CiAgICB9CgogICAgLy8gSGVscGVyIEZ1bmNzCiAgICBnZXRUYXJnZXRzKHNwcml0ZXNPbmx5KSB7CiAgICAgIGNvbnN0IHNwcml0ZU5hbWVzID0gW107CiAgICAgIGlmIChzcHJpdGVzT25seSkgc3ByaXRlTmFtZXMucHVzaCh7IHRleHQ6IFNjcmF0Y2gudHJhbnNsYXRlKCJteXNlbGYiKSwgdmFsdWU6ICJfbXlzZWxmXyIgfSk7CiAgICAgIGVsc2Ugc3ByaXRlTmFtZXMucHVzaCh7IHRleHQ6IFNjcmF0Y2gudHJhbnNsYXRlKCJTdGFnZSIpLCB2YWx1ZTogIl9zdGFnZV8iIH0pOwogICAgICBjb25zdCB0YXJnZXRzID0gcnVudGltZS50YXJnZXRzOwogICAgICBmb3IgKGxldCBpID0gMTsgaSA8IHRhcmdldHMubGVuZ3RoOyBpKyspIHsKICAgICAgICBjb25zdCB0YXJnZXQgPSB0YXJnZXRzW2ldOwogICAgICAgIGlmICh0YXJnZXQuaXNPcmlnaW5hbCkgc3ByaXRlTmFtZXMucHVzaCh7IHRleHQ6IHRhcmdldC5nZXROYW1lKCksIHZhbHVlOiB0YXJnZXQuZ2V0TmFtZSgpIH0pOwogICAgICB9CiAgICAgIHJldHVybiBzcHJpdGVOYW1lcy5sZW5ndGggPiAwID8gc3ByaXRlTmFtZXMgOiBbIiJdOwogICAgfQoKICAgIGdldFRhcmdldChuYW1lLCB1dGlsKSB7CiAgICAgIGlmIChuYW1lID09PSAiX215c2VsZl8iKSByZXR1cm4gdXRpbC50YXJnZXQ7CiAgICAgIGlmIChuYW1lID09PSAiX3N0YWdlXyIpIHJldHVybiBydW50aW1lLmdldFRhcmdldEZvclN0YWdlKCk7CiAgICAgIHJldHVybiBydW50aW1lLmdldFNwcml0ZVRhcmdldEJ5TmFtZShuYW1lKTsKICAgIH0KCiAgICBnZXRUaGlzQmxvY2sodXRpbCkgewogICAgICByZXR1cm4gdXRpbC50aHJlYWQuYmxvY2tDb250YWluZXIuZ2V0QmxvY2soCiAgICAgICAgdXRpbC50aHJlYWQuaXNDb21waWxlZCA/IHV0aWwudGhyZWFkLnBlZWtTdGFjaygpIDogdXRpbC50aHJlYWQucGVla1N0YWNrRnJhbWUoKS5vcC5pZAogICAgICApOwogICAgfQoKICAgIGdldEJsb2NrSW5kZXgodGhyZWFkLCBpZCkgewogICAgICBjb25zdCBjb250YWluZXIgPSB0aHJlYWQuYmxvY2tDb250YWluZXI7CiAgICAgIGxldCBpbmRleCA9IDA7CiAgICAgIHdoaWxlIChpZCkgewogICAgICAgIGluZGV4Kys7CiAgICAgICAgaWQgPSBjb250YWluZXIuZ2V0QmxvY2soaWQpPy5wYXJlbnQ7CiAgICAgIH0KICAgICAgcmV0dXJuIGluZGV4OwogICAgfQoKICAgIHRhcmdldEhhc0Jsb2NrKGlkLCB0YXJnZXQpIHsKICAgICAgaWYgKHRhcmdldC5ibG9ja3MuX2Jsb2Nrc1tpZF0pIHJldHVybiB0cnVlOwogICAgICBlbHNlIHJldHVybiBmYWxzZTsKICAgIH0KCiAgICBwdXNoVGhyZWFkQXNUYXJnZXQoaWQsIG5ld1QsIG9sZFQpIHsKICAgICAgY29uc3QgdGhyZWFkID0gcnVudGltZS5fcHVzaFRocmVhZChpZCwgb2xkVCk7CiAgICAgIHRocmVhZC50YXJnZXQgPSBuZXdUOwogICAgICB0aHJlYWQub2dUYXJnZXQgPSBvbGRUOwogICAgICBpZiAocnVudGltZS5jb21waWxlck9wdGlvbnMuZW5hYmxlZCkgdGhyZWFkLnRyeUNvbXBpbGUoKTsKICAgICAgcmV0dXJuIHRocmVhZDsKICAgIH0KCiAgICBhZGRNaXNzaW5nRGF0YShzcmNPYmosIG5ld09iaikgewogICAgICAvLyByZS1hZGQgYW55IG1pc3NpbmcgY3VzdG9tIHRocmVhZCBkYXRhCiAgICAgIFJlZmxlY3Qub3duS2V5cyhzcmNPYmopLmZvckVhY2goa2V5ID0+IHsKICAgICAgICBpZiAoIShrZXkgaW4gbmV3T2JqKSkgbmV3T2JqW2tleV0gPSBzcmNPYmpba2V5XTsKICAgICAgfSk7CiAgICAgIFJlZmxlY3Qub3duS2V5cyhzcmNPYmouc3RhY2tGcmFtZXNbMF0pLmZvckVhY2goa2V5ID0+IHsKICAgICAgICBpZiAoIShrZXkgaW4gbmV3T2JqLnN0YWNrRnJhbWVzWzBdKSkgbmV3T2JqLnN0YWNrRnJhbWVzWzBdW2tleV0gPSBzcmNPYmouc3RhY2tGcmFtZXNbMF1ba2V5XTsKICAgICAgfSk7CiAgICB9CgogICAgLy8gQmxvY2sgRnVuY3MKICAgIGxvZ1NjcmlwdChhcmdzLCB1dGlsKSB7CiAgICAgIGNvbnN0IHRoaXNCbG9jayA9IHRoaXMuZ2V0VGhpc0Jsb2NrKHV0aWwpOwogICAgICBpZiAoIXRoaXNCbG9jaykgcmV0dXJuOwogICAgICAKICAgICAgY29uc3QgdGhyZWFkID0gdXRpbC50aHJlYWQ7CiAgICAgIG1hcmtlZFNjcmlwdHMuc2V0KENhc3QudG9TdHJpbmcoYXJncy5JRCksIHsKICAgICAgICB0aHJlYWRDdHg6IHRocmVhZCwgdGFyZ2V0OiB0aHJlYWQub2dUYXJnZXQgPz8gdGhyZWFkLnRhcmdldCwKICAgICAgICBsb2dJbmRleDogdGhpcy5nZXRCbG9ja0luZGV4KHRocmVhZCwgdGhpc0Jsb2NrLmlkKQogICAgICB9KTsKICAgIH0KCiAgICByZW1vdmVMb2coYXJncykgewogICAgICBtYXJrZWRTY3JpcHRzLmRlbGV0ZShDYXN0LnRvU3RyaW5nKGFyZ3MuSUQpKTsKICAgIH0KCiAgICByZW1vdmVMb2dzKCkgewogICAgICBtYXJrZWRTY3JpcHRzID0gbmV3IE1hcCgpOwogICAgfQoKICAgIGFsbExvZ3MoKSB7CiAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShtYXJrZWRTY3JpcHRzLmtleXMoKS50b0FycmF5KCkpOwogICAgfQoKICAgIGluZGV4TG9nKGFyZ3MpIHsKICAgICAgY29uc3Qgc2NyaXB0ID0gbWFya2VkU2NyaXB0cy5nZXQoQ2FzdC50b1N0cmluZyhhcmdzLklEKSk7CiAgICAgIHJldHVybiBzY3JpcHQgPyBzY3JpcHQubG9nSW5kZXggOiAwOwogICAgfQoKICAgIGRvU2NyaXB0cyhhcmdzKSB7CiAgICAgIGNvbnN0IHNjcmlwdCA9IG1hcmtlZFNjcmlwdHMuZ2V0KENhc3QudG9TdHJpbmcoYXJncy5JRCkpOwogICAgICBpZiAoIXNjcmlwdCkgcmV0dXJuOwoKICAgICAgY29uc3QgY3R4ID0gc2NyaXB0LnRocmVhZEN0eDsKICAgICAgc3dpdGNoIChhcmdzLlRZUEUpIHsKICAgICAgICBjYXNlICJzdGFydCI6CiAgICAgICAgICBpZiAodGhpcy50YXJnZXRIYXNCbG9jayhjdHgudG9wQmxvY2ssIHNjcmlwdC50YXJnZXQpKSBydW50aW1lLl9wdXNoVGhyZWFkKGN0eC50b3BCbG9jaywgc2NyaXB0LnRhcmdldCk7CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICJyZXN0YXJ0IjoKICAgICAgICAgIGlmICh0aGlzLnRhcmdldEhhc0Jsb2NrKGN0eC50b3BCbG9jaywgc2NyaXB0LnRhcmdldCkpIHJ1bnRpbWUuX3Jlc3RhcnRUaHJlYWQoY3R4KTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgInN0b3AiOgogICAgICAgICAgcnVudGltZS5fc3RvcFRocmVhZChjdHgpOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAicGF1c2UiOgogICAgICAgICAgaWYgKHRoaXMuaXNTY3JpcHQoYXJncykgJiYgY3R4W2NvbnRyb2xLZXldID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgY3R4W2NvbnRyb2xLZXldID0gY3R4LnN0YXR1czsKICAgICAgICAgICAgY3R4LnN0YXR1cyA9IDU7CiAgICAgICAgICB9CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICJ1bnBhdXNlIjoKICAgICAgICAgIGlmICh0aGlzLmlzU2NyaXB0KGFyZ3MpICYmIGN0eFtjb250cm9sS2V5XSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgIGN0eC5zdGF0dXMgPSBjdHhbY29udHJvbEtleV07CiAgICAgICAgICAgIGN0eFtjb250cm9sS2V5XSA9IHVuZGVmaW5lZDsKICAgICAgICAgIH0KICAgICAgICAgIGJyZWFrOwogICAgICAgIGRlZmF1bHQ6IHJldHVybjsKICAgICAgfQogICAgfQoKICAgIHNraXBCbG9ja3MoYXJncykgewogICAgICBjb25zdCBzY3JpcHQgPSBtYXJrZWRTY3JpcHRzLmdldChDYXN0LnRvU3RyaW5nKGFyZ3MuSUQpKTsKICAgICAgaWYgKCFzY3JpcHQpIHJldHVybjsKCiAgICAgIGNvbnN0IGN0eCA9IHNjcmlwdC50aHJlYWRDdHg7CiAgICAgIGNvbnN0IGNvbnRhaW5lciA9IGN0eC5ibG9ja0NvbnRhaW5lcjsKICAgICAgY29uc3QgaW5kZXggPSBDYXN0LnRvTnVtYmVyKGFyZ3MuTlVNKTsKCiAgICAgIGxldCBjdXJJRCA9IGNvbnRhaW5lci5nZXRCbG9jayhjdHgudG9wQmxvY2spPy5pZDsKICAgICAgaWYgKCFjdXJJRCkgcmV0dXJuOwogICAgICBmb3IgKGxldCBpID0gMTsgaSA8IGluZGV4OyBpKyspIHsKICAgICAgICBjdXJJRCA9IGNvbnRhaW5lci5nZXROZXh0QmxvY2soY3VySUQpOwogICAgICAgIGlmICghY3VySUQpIHJldHVybjsKICAgICAgfQogICAgICBydW50aW1lLl9wdXNoVGhyZWFkKGN1cklELCBzY3JpcHQudGFyZ2V0KTsKICAgIH0KCiAgICBza2lwTXlCbG9ja3MoYXJncywgdXRpbCkgewogICAgICBjb25zdCB0aGlzQmxvY2sgPSB0aGlzLmdldFRoaXNCbG9jayh1dGlsKTsKICAgICAgaWYgKCF0aGlzQmxvY2spIHJldHVybjsKCiAgICAgIGNvbnN0IHRocmVhZCA9IHV0aWwudGhyZWFkOwogICAgICBjb25zdCBjb250YWluZXIgPSB0aHJlYWQuYmxvY2tDb250YWluZXI7CiAgICAgIGNvbnN0IGluZGV4ID0gQ2FzdC50b051bWJlcihhcmdzLk5VTSkgKyAxOwoKICAgICAgbGV0IGN1cklEID0gdGhpc0Jsb2NrOwogICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGluZGV4OyBpKyspIHsKICAgICAgICBjdXJJRCA9IGNvbnRhaW5lci5nZXROZXh0QmxvY2soY3VySUQpOwogICAgICAgIGlmICghY3VySUQpIGJyZWFrOwogICAgICB9CgogICAgICBpZiAodGhyZWFkLmlzQ29tcGlsZWQpIHRoaXMuYWRkTWlzc2luZ0RhdGEodGhyZWFkLCBydW50aW1lLl9wdXNoVGhyZWFkKGN1cklELCB0aHJlYWQudGFyZ2V0KSk7CiAgICAgIGVsc2UgdGhyZWFkLnJldXNlU3RhY2tGb3JOZXh0QmxvY2soY3VySUQpOwogICAgfQoKICAgIGRvU2NyaXB0VGFyZ2V0KGFyZ3MsIHV0aWwpIHsKICAgICAgY29uc3Qgc2NyaXB0ID0gbWFya2VkU2NyaXB0cy5nZXQoQ2FzdC50b1N0cmluZyhhcmdzLklEKSk7CiAgICAgIGNvbnN0IHRhcmdldCA9IHRoaXMuZ2V0VGFyZ2V0KGFyZ3MuVEFSR0VULCB1dGlsKTsKICAgICAgaWYgKCF0YXJnZXQgfHwgIXNjcmlwdCkgcmV0dXJuOwoKICAgICAgY29uc3QgY3R4ID0gc2NyaXB0LnRocmVhZEN0eDsKICAgICAgdGhpcy5wdXNoVGhyZWFkQXNUYXJnZXQoY3R4LnRvcEJsb2NrLCB0YXJnZXQsIHNjcmlwdC50YXJnZXQpOwogICAgfQoKICAgIGRvU2NyaXB0Q2xvbmUoYXJncywgdXRpbCkgewogICAgICBjb25zdCBzY3JpcHQgPSBtYXJrZWRTY3JpcHRzLmdldChDYXN0LnRvU3RyaW5nKGFyZ3MuSUQpKTsKICAgICAgY29uc3QgdGFyZ2V0ID0gdGhpcy5nZXRUYXJnZXQoYXJncy5UQVJHRVQsIHV0aWwpOwogICAgICBpZiAoIXRhcmdldCB8fCAhc2NyaXB0KSByZXR1cm47CgogICAgICBjb25zdCB2YXJOYW1lID0gQ2FzdC50b1N0cmluZyhhcmdzLlZBUik7CiAgICAgIGNvbnN0IGN0eCA9IHNjcmlwdC50aHJlYWRDdHg7CiAgICAgIGNvbnN0IGNsb25lcyA9IHRhcmdldC5zcHJpdGUuY2xvbmVzOwogICAgICBpZiAoIXZhck5hbWUpIHsKICAgICAgICBmb3IgKGNvbnN0IGNsb25lIG9mIGNsb25lcykgewogICAgICAgICAgaWYgKCFjbG9uZS5pc09yaWdpbmFsKSB0aGlzLnB1c2hUaHJlYWRBc1RhcmdldChjdHgudG9wQmxvY2ssIGNsb25lLCBzY3JpcHQudGFyZ2V0KTsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgZm9yIChjb25zdCBjbG9uZSBvZiBjbG9uZXMpIHsKICAgICAgICAgIGNvbnN0IHZhcmlhYmxlID0gY2xvbmUubG9va3VwVmFyaWFibGVCeU5hbWVBbmRUeXBlKHZhck5hbWUsICIiLCB0cnVlKTsKICAgICAgICAgIGlmICh2YXJpYWJsZSAmJiBDYXN0LnRvU3RyaW5nKHZhcmlhYmxlLnZhbHVlKSA9PT0gQ2FzdC50b1N0cmluZyhhcmdzLlZBTCkpIHsKICAgICAgICAgICAgdGhpcy5wdXNoVGhyZWFkQXNUYXJnZXQoY3R4LnRvcEJsb2NrLCBjbG9uZSwgc2NyaXB0LnRhcmdldCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgd2hpbGVTY3JpcHQoYXJncywgdXRpbCkgewogICAgICBpZiAodGhpcy5pc1NjcmlwdChhcmdzKSkgdXRpbC5zdGFydEJyYW5jaCgxLCB0cnVlKTsKICAgIH0KCiAgICBpc1NjcmlwdChhcmdzKSB7CiAgICAgIGNvbnN0IHNjcmlwdCA9IG1hcmtlZFNjcmlwdHMuZ2V0KENhc3QudG9TdHJpbmcoYXJncy5JRCkpOwogICAgICByZXR1cm4gc2NyaXB0ID8gc2NyaXB0LnRocmVhZEN0eC5zdGF0dXMgIT09IDQgOiBmYWxzZTsKICAgIH0KCiAgICBpc01hbnVhbChhcmdzKSB7CiAgICAgIGNvbnN0IHNjcmlwdCA9IG1hcmtlZFNjcmlwdHMuZ2V0KENhc3QudG9TdHJpbmcoYXJncy5JRCkpOwogICAgICBpZiAoIXNjcmlwdCkgcmV0dXJuIGZhbHNlOwoKICAgICAgY29uc3QgdGhyZWFkID0gc2NyaXB0LnRocmVhZEN0eDsKICAgICAgcmV0dXJuIHRocmVhZC5zdGFja0NsaWNrICYmIHRocmVhZC5zdGF0dXMgIT09IDQ7CiAgICB9CgogICAgLyogRGVwcmVjYXRpb24gTWFya2VyICovCiAgICBtYXJrU2NyaXB0KGFyZ3MsIHV0aWwpIHsKICAgICAgdGhpcy5sb2dTY3JpcHQoYXJncywgdXRpbCk7CiAgICB9CiAgICAvKiBNYXJrZXIgRW5kICovCiAgfQoKICBmdW5jdGlvbiBhZGQyQm9keSgpIHsKICAgIHZhciBncmFkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2Iik7CiAgICBncmFkLmlubmVySFRNTCA9IGAKICAgICAgPHN2Zz48ZGVmcz4KICAgICAgICA8bGluZWFyR3JhZGllbnQgeDE9IjIwMCIgeTE9IjAiIHgyPSIyNDAiIHkyPSIxMDAiIGdyYWRpZW50VW5pdHM9InVzZXJTcGFjZU9uVXNlIiBpZD0iU1BzY3JpcHRzLUdSQUQxIj4KICAgICAgICA8c3RvcCBvZmZzZXQ9IjAiIHN0b3AtY29sb3I9IiMxZTgzNzAiLz48c3RvcCBvZmZzZXQ9IjAuNSIgc3RvcC1jb2xvcj0iIzNhNjA2MiIvPjwvbGluZWFyR3JhZGllbnQ+CiAgICAgIDwvZGVmcz48L3N2Zz5gOwogICAgZG9jdW1lbnQuYm9keS5hcHBlbmQoZ3JhZCk7CiAgfQogIGlmIChTY3JhdGNoLmd1aSkgU2NyYXRjaC5ndWkuZ2V0QmxvY2tseSgpLnRoZW4oKFNCKSA9PiB7CiAgICBhZGQyQm9keSgpOwogICAgaWYgKCFTQj8uU1BncmFkaWVudHM/LnBhdGNoZWQpIHsKICAgICAgLy8gR3JhZGllbnQgUGF0Y2ggYnkgMHpuencgJiBTaGFya1Bvb2wKICAgICAgU0IuU1BncmFkaWVudHMgPSB7IGdyYWRpZW50VXJsczoge30sIHBhdGNoZWQ6IGZhbHNlIH07CiAgICAgIGNvbnN0IEJTUCA9IFNCLkJsb2NrU3ZnLnByb3RvdHlwZSwgQlNQUiA9IEJTUC5yZW5kZXI7CiAgICAgIEJTUC5yZW5kZXIgPSBmdW5jdGlvbiguLi5hcmdzKSB7CiAgICAgICAgY29uc3QgYmxvY2tUaGVtZSA9IFJlZHV4U3RvcmUuZ2V0U3RhdGUoKS5zY3JhdGNoR3VpPy50aGVtZT8udGhlbWU/LmJsb2NrczsKICAgICAgICBjb25zdCByZXMgPSBCU1BSLmFwcGx5KHRoaXMsIGFyZ3MpOwogICAgICAgIGxldCBjYXRlZ29yeTsKICAgICAgICBpZiAodGhpcz8uc3ZnUGF0aF8gJiYgdGhpcz8uY2F0ZWdvcnlfICYmIChjYXRlZ29yeSA9IHRoaXMudHlwZS5zbGljZSgwLCB0aGlzLnR5cGUuaW5kZXhPZigiXyIpKSkgJiYgU0IuU1BncmFkaWVudHMuZ3JhZGllbnRVcmxzW2NhdGVnb3J5XSkgewogICAgICAgICAgY29uc3QgdXJscyA9IFNCLlNQZ3JhZGllbnRzLmdyYWRpZW50VXJsc1tjYXRlZ29yeV07CiAgICAgICAgICBpZiAodXJscykgewogICAgICAgICAgICB0aGlzLnN2Z1BhdGhfLnNldEF0dHJpYnV0ZSgiZmlsbCIsIHVybHNbMF0pOwogICAgICAgICAgICBpZiAoYmxvY2tUaGVtZSA9PT0gImRhcmsiKSB7CiAgICAgICAgICAgICAgdGhpcy5zdmdQYXRoXy5zZXRBdHRyaWJ1dGUoImZpbGwtb3BhY2l0eSIsICIuNSIpOwogICAgICAgICAgICAgIHRoaXMuc3ZnUGF0aF8uc2V0QXR0cmlidXRlKCJzdHJva2UiLCAiIzMxZDZiNyIpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiByZXM7CiAgICAgIH0KICAgICAgU0IuU1BncmFkaWVudHMucGF0Y2hlZCA9IHRydWU7CiAgICB9CiAgICBTY3JhdGNoQmxvY2tzLlNQZ3JhZGllbnRzLmdyYWRpZW50VXJsc1siU1BzY3JpcHRzIl0gPSBbInVybCgjU1BzY3JpcHRzLUdSQUQxKSJdOwogIH0pOwoKICBTY3JhdGNoLmV4dGVuc2lvbnMucmVnaXN0ZXIobmV3IFNQc2NyaXB0cygpKTsKfSkoU2NyYXRjaCk7Cg==","data:text/javascript;base64,","data:text/javascript;base64,","data:text/javascript;base64,","https://extensions.turbowarp.org/stretch.js","data:text/javascript;base64,"],"bakeExtensions":true,"maxTextureDimension":2048}